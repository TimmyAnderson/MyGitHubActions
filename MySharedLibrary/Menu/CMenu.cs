using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//--------------------------------------------------------------------------------------------------------------------------------
namespace MySharedLibrary
{
//--------------------------------------------------------------------------------------------------------------------------------
	public abstract class CMenu
	{
//--------------------------------------------------------------------------------------------------------------------------------
		private static readonly string							LINE_SEPARATOR=new string('-',80);
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
		private readonly CMenuCommand							MCommandExit;
//--------------------------------------------------------------------------------------------------------------------------------
		private CMenuCommand[]									MCommands;
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
		public CMenu(CMenuCommand CommandExit)
		{
			MCommandExit=CommandExit;
		}
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
		private void PrintMenu()
		{
			Console.WriteLine(LINE_SEPARATOR);

			StringBuilder										SB=new StringBuilder();

			for(int Index=0;Index<MCommands.Length;Index++)
			{
				CMenuCommand									Command=MCommands[Index];

				if (Index>0)
				{
					SB.Append(' ');
				}

				SB.Append($"{Command.CommandID} [{Command.CommandText}]");
			}			

			SB.Append('.');

			Console.WriteLine(SB.ToString());

			Console.WriteLine(LINE_SEPARATOR);
		}
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
		private void CreateCommands()
		{
			CMenuCommand[]										Commands=GetCommands();
			CMenuCommand[]										AllCommands=new CMenuCommand[Commands.Length+1];

			AllCommands[0]=MCommandExit;
			Array.Copy(Commands,0,AllCommands,1,Commands.Length);

			for(int Index1=0;Index1<AllCommands.Length-1;Index1++)
			{
				string											CommandID1=AllCommands[Index1].CommandID;

				for(int Index2=Index1+1;Index2<AllCommands.Length;Index2++)
				{
					string										CommandID2=AllCommands[Index2].CommandID;

					if (CommandID1==CommandID2)
					{
						throw(new InvalidOperationException($"COMMAND [{CommandID1}] is DUPLICATE."));
					}
				}
			}

			MCommands=AllCommands;
		}
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
		protected abstract CMenuCommand[] GetCommands();
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
		public void Execute()
		{
			CreateCommands();

			while(true)
			{
				PrintMenu();

				string											Line=Console.ReadLine();

				if (Line!=null && Line.Length>0)
				{
					string[]									CommandWithParameters=Line.Split(' ',StringSplitOptions.RemoveEmptyEntries);
					string										CommandID=CommandWithParameters[0];

					foreach(CMenuCommand Command in MCommands)
					{
						if (CommandID==Command.CommandID)
						{
							string[]							CommandParameters=CommandWithParameters.Skip(1).ToArray();

							try
							{
								Command.CallCommandOperation(CommandParameters);
							}
							catch(Exception E)
							{
								Console.WriteLine($"EXCEPTION [{E}] !");
							}

							break;
						}
					}

					if (CommandID==MCommandExit.CommandID)
					{
						break;
					}
				}
				else
				{
					Console.Clear();
				}
			}
		}
//--------------------------------------------------------------------------------------------------------------------------------
	}
//--------------------------------------------------------------------------------------------------------------------------------
}
//--------------------------------------------------------------------------------------------------------------------------------